#!/bin/sh

CONFIG=./config

if [ -f config.env ] ; then
    . ./config.env
fi

if ! [ -f $CONFIG/tlsgw.env ] ; then
    touch $CONFIG/tlsgw.env
fi

echo "$BRIDGE_CLIENT_CRT" > $CONFIG/bridge_client.crt
echo "$BRIDGE_CLIENT_KEY" > $CONFIG/bridge_client.key
echo "$MQTT_BROKER_CRT" > $CONFIG/broker.crt
echo "$MQTT_BROKER_KEY" > $CONFIG/broker.key
echo "$MQTT_CACERT" > $CONFIG/cacert.pem
echo "$TAPP_CLIENT_CRT" > $CONFIG/tapp_client.crt
echo "$TAPP_CLIENT_KEY" > $CONFIG/tapp_client.key

cat << EOS > $CONFIG/mosquitto.passwd
$MQTT_USERNAME1:$MQTT_PASSWORD1
$MQTT_USERNAME2:$MQTT_PASSWORD2
$MQTT_USERNAME3:$MQTT_PASSWORD3
$MQTT_USERNAME4:$MQTT_PASSWORD4
EOS
./hash_mqtt_passwd.sh

cat << EOS > $CONFIG/mosquitto.acl
user $MQTT_USERNAME1
topic aircon/#

user $MQTT_USERNAME2
topic aircon/#

user $MQTT_USERNAME3
topic aircon/#

user $MQTT_USERNAME4
topic aircon/#
EOS

cat << EOS > $CONFIG/django_env
# DJANGO_SECRET_KEY should be generated by the make_secretenv.sh placed in the parent folder.
# The script will check if the env file does not exist and create the env file with DJANGO_SECRET_KEY.
# Then, you should add other values described in this file to the generated env file.
DJANGO_SECRET_KEY='$DJANGO_SECRET_KEY'

# Comma-separeted list of ALLOWED_HOSTS
ALLOWED_HOSTS='$DJANGO_ALLOWED_HOSTS'

# Comma-separeted list of CSRF_TRUSTED_ORIGINS
CSRF_TRUSTED_ORIGINS='$DJANGO_CSRF_TRUSTED_ORIGINS'

# Comma-separated list of IP ranges in CIDR notation.
# Clients with IP addresses within the ranges can access the content without authentication.
# This list can be an empty string: WHITELISTED_RANGES='', which will require all clients to be authenticated.
WHITELISTED_RANGES='$DJANGO_WHITELISTED_RANGES'

TIME_ZONE='$DJANGO_TIME_ZONE'

EOS

cat << EOS > $CONFIG/tapp_mqtt.conf
[broker]
# Set hostname and port of the MQTT broker
# tls = true for TLS connection, default is false
host = $MQTT_HOST
port = $MQTT_PORT
tls = $MQTT_TLS

# Set topic name
topic = $TAPP_TOPIC

[credentials]
# Set username and password for MQTT connection.
# If user authentication not required, remove these.
username = $MQTT_USERNAME2
password = $MQTT_PASSWORD2

# Set TLS CA certificate file to authenticate the MQTT broker.
# If you do not need server authentication, remove this.
cacert = /run/secrets/mqtt_cacert

# Set TLS client certificate and client key file for MQTT connection.
# If client certificate is not required, remove these.
certfile = /run/secrets/tapp_clientcert
keyfile = /run/secrets/tapp_clientkey
EOS

cat << EOS > $CONFIG/bridge.conf
[broker]
host = $MQTT_HOST
port = $MQTT_PORT
tls = $MQTT_TLS
topics = $BRIDGE_TOPICS

[credentials]
username = $MQTT_USERNAME3
password = $MQTT_PASSWORD3
cacert = /run/secrets/mqtt_cacert
certfile = /run/secrets/bridge_clientcert
keyfile = /run/secrets/bridge_clientkey
EOS

cat << EOS > $CONFIG/tlsgw.env
DOMAINS='$TLSGW_DOMAINS'

STAGE='$TLSGW_STAGE' # Don't use production until staging works

# If a reverse proxy is placed in front of the HTTPS-PORTAL,
# and the proxy uses proxy protocol v2, specify the IP address of the
# proxy in REAL_IP_FROM to accept the remote IP provided by the proxy.

REAL_IP_FROM='$TLSGW_REAL_IP_FROM'
EOS
